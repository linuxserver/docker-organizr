---

# project information
project_name: organizr
project_url: "https://github.com/causefx/Organizr"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/organizr-icon.png"
project_blurb: |
  # THIS IMAGE IS DEPRECATED. Please use the official image at https://hub.docker.com/r/organizr/organizr

  [{{ project_name|capitalize }}]({{ project_url }}) is a HTPC/Homelab Services Organizer - Written in PHP

  Do you have quite a bit of services running on your computer or server? 
  Do you have a lot of bookmarks or have to memorize a bunch of ip's and ports? 
  Well, Organizr is here to help with that. Organizr allows you to setup "Tabs" that will be loaded all in one webpage. 
  You can then work on your server with ease. You can even open up two tabs side by side. 
  Want to give users access to some Tabs? No problem, just enable user support and have them make an account. 
  Want guests to be able to visit too? Enable Guest support for those tabs.

  For more information on Organizr and information on how to use it visit their site at https://github.com/causefx/Organizr
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
  - { arch: "{{ arch_armhf }}", tag: "arm32v7-latest"}

# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "<path to data>", desc: "this is where your user data and logs will live" }
param_usage_include_env: true
param_env_vars:
  - { env_var: "TZ", env_value: "<your timezone, eg Europe/London>", desc: "for specifying your timezone" }
param_usage_include_ports: true
param_ports:
  - { external_port: "9983", internal_port: "80", port_desc: "will map the container's port 80 to port 9983 on the host" }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  Dead simple to get running, create the container as instructed and start it. When up and running, load the site.


# changelog
changelogs:
  - { date: "18.04.19:", desc: "Fix new install not working." }
  - { date: "23.03.19:", desc: "Switching to new Base images, shift to arm32v7 tag." }
  - { date: "26.02.19:", desc: "Upgrade packages during install to prevent mismatch with baseimage." }
  - { date: "22.02.19:", desc: "Rebasing to alpine 3.9." }
  - { date: "11.02.19:", desc: "Fix permissions on new app location" }
  - { date: "31.12.18:", desc: "Moved to pipeline building from v1-master branch" }
  - { date: "05.09.18:", desc: "Rebase to Alpine 3.8" }
  - { date: "10.01.18:", desc: "Rebase to Alpine 3.7" }
  - { date: "25.05.17:", desc: "Rebase to Alpine 3.6" }
  - { date: "02.05.17:", desc: "Added php7-curl package" }
  - { date: "12.04.17:", desc: "Added php7-ldap package" }
  - { date: "10.03.18:", desc: "Initial Release." }
  
